const jwt = require("jsonwebtoken");

// üîê Middleware qui v√©rifie la pr√©sence d‚Äôun token valide
const verifyToken = (req, res, next) => {
  const authHeader = req.headers.authorization;

  // V√©rifie si le header Authorization est pr√©sent
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ error: "Token manquant ou invalide" });
  }

  const token = authHeader.split(" ")[1];

  try {
    // V√©rifie la validit√© du token avec la cl√© secr√®te
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // On attache l'utilisateur d√©cod√© √† la requ√™te
    next(); // Passe au middleware suivant
  } catch (err) {
    console.error("JWT verification error:", err);
    return res.status(403).json({ error: "Token invalide" });
  }
};

// üõ° Middleware qui v√©rifie que l‚Äôutilisateur est admin
const isAdmin = (req, res, next) => {
  if (req.user.role !== "admin") {
    return res.status(403).json({ error: "Acc√®s r√©serv√© aux administrateurs" });
  }
  next(); // Continue si c'est un admin
};

module.exports = { verifyToken, isAdmin };
